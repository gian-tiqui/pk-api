generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  firstName        String
  middleName       String?
  lastName         String
  isDeleted        Boolean         @default(false)
  employeeId       String          @unique
  password         String
  deptId           Int
  department       Department      @relation(fields: [deptId], references: [id])
  refreshToken     String?         @unique
  logs             Log[]
  secretQuestionId Int?
  secretQuestion   SecretQuestion? @relation(fields: [secretQuestionId], references: [id])
  secretAnswer     String?
  floors           Floor[]
  rooms            Room[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  transactions     Transaction[]
}

model Department {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  code       String   @unique
  users      User[]
  divisionId Int
  division   Division @relation(fields: [divisionId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  items      Item[]
}

model Division {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  code        String       @unique
  departments Department[]
}

model Floor {
  id            Int      @id @default(autoincrement())
  name          String
  level         Int
  code          String
  isDeleted     Boolean  @default(false)
  rooms         Room[]
  creatorId     Int
  creator       User     @relation(fields: [creatorId], references: [id])
  imageLocation String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Room {
  id                Int                @id @default(autoincrement())
  name              String
  code              String
  detail            String?
  floorId           Int
  floor             Floor              @relation(fields: [floorId], references: [id], onDelete: Cascade)
  images            RoomImages[]
  isDeleted         Boolean            @default(false)
  creatorId         Int
  direction         String?
  directionPatterns DirectionPattern[]
  status            String?
  creator           User               @relation(fields: [creatorId], references: [id])
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model DirectionPattern {
  id               Int      @id @default(autoincrement())
  startingPoint    Int
  roomId           Int
  room             Room     @relation(fields: [roomId], references: [id])
  directionPattern Json
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model RoomImages {
  id            Int      @id @default(autoincrement())
  roomId        Int
  room          Room     @relation(fields: [roomId], references: [id])
  imageLocation String   @unique
  isMainImage   Boolean
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Log {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  log       Json
  typeId    Int
  type      LogType   @relation(fields: [typeId], references: [id])
  methodId  Int
  method    LogMethod @relation(fields: [methodId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model LogMethod {
  id        Int      @id @default(autoincrement())
  method    String   @unique
  logs      Log[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LogType {
  id        Int      @id @default(autoincrement())
  type      String   @unique
  logs      Log[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SecretQuestion {
  id        Int      @id @default(autoincrement())
  question  String
  user      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id            String      @id @default(uuid())
  description   String      @unique
  price         Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  deptId        Int
  department    Department  @relation(fields: [deptId], references: [id])
  
  selectedItems SelectedItem[]
}

model Transaction {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  userId        Int
  user          User        @relation(fields: [userId], references: [id])

  selectedItems SelectedItem[]
}

model SelectedItem {
  id            Int           @id @default(autoincrement())

  itemId        String
  item          Item          @relation(fields: [itemId], references: [id])
  doctorId      Int
  doctor        Doctor        @relation(fields: [doctorId], references: [id])
  transactionId Int
  transaction   Transaction   @relation(fields: [transactionId], references: [id])
}

model Doctor {
  id                Int         @id @default(autoincrement())
  firstName         String
  middleName        String
  lastName          String

  specializationId  Int
  specialization    Specialization @relation(fields: [specializationId], references: [id])

  selectedItems     SelectedItem[]
}

model Specialization {
  id                Int          @id @default(autoincrement())
  description       String       @unique

  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  doctors           Doctor[]
}
